// <auto-generated />
using System;
using BigBang2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BigBang2.Migrations
{
    [DbContext(typeof(HospitalContext))]
    [Migration("20230630113134_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BigBang2.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BigBang2.Models.Doctor", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<bool>("DocActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("DocImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocSpecialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocId");

                    b.HasIndex("AdminId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("BigBang2.Models.Medication", b =>
                {
                    b.Property<int>("MedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedId"));

                    b.Property<string>("MedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("BigBang2.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientAge")
                        .HasColumnType("int");

                    b.Property<string>("PatientDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientGender")
                        .HasColumnType("int");

                    b.Property<byte[]>("PatientImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("AdminId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.Property<int>("DoctorsDocId")
                        .HasColumnType("int");

                    b.Property<int>("PatientsPatientId")
                        .HasColumnType("int");

                    b.HasKey("DoctorsDocId", "PatientsPatientId");

                    b.HasIndex("PatientsPatientId");

                    b.ToTable("DoctorPatient");
                });

            modelBuilder.Entity("MedicationPatient", b =>
                {
                    b.Property<int>("MedsMedId")
                        .HasColumnType("int");

                    b.Property<int>("PatientsPatientId")
                        .HasColumnType("int");

                    b.HasKey("MedsMedId", "PatientsPatientId");

                    b.HasIndex("PatientsPatientId");

                    b.ToTable("MedicationPatient");
                });

            modelBuilder.Entity("BigBang2.Models.Doctor", b =>
                {
                    b.HasOne("BigBang2.Models.Admin", null)
                        .WithMany("Doctors")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("BigBang2.Models.Patient", b =>
                {
                    b.HasOne("BigBang2.Models.Admin", null)
                        .WithMany("Patients")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.HasOne("BigBang2.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang2.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicationPatient", b =>
                {
                    b.HasOne("BigBang2.Models.Medication", null)
                        .WithMany()
                        .HasForeignKey("MedsMedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang2.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BigBang2.Models.Admin", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
